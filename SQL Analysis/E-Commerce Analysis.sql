-- 1. STATISTICS REGARDING DATASET --
-- Total Number of orders  
SELECT COUNT(`Order ID`) AS Total_Orders 
FROM order_details; 

-- Total Quantity of products sold 
SELECT SUM(Quantity) AS Total_Quantity 
FROM order_details;

-- Total profit made by the store 
SELECT SUM(profit) AS Total_Profit 
FROM order_details;

-- No of customers 
SELECT COUNT(DISTINCT CustomerName) AS Customers 
FROM customers ;

-- Average price of products in the store 
SELECT AVG(Amount) AS AveragePrice 
FROM order_details;

-- Least and the most expensive products in the store 
SELECT 'least expensive product', MIN(Amount) AS price 
FROM order_details
UNION ALL 
SELECT 'most expensive product', MAX(Amount) AS Price 
FROM order_details ;

-- 2. ANALYTICAL QUESTIONS ---
-- status of the order 
SELECT *, 
CASE WHEN profit > 0 THEN 'Profit' 
	 WHEN profit < 0 THEN 'Loss' 
	 ELSE 'None' END AS Status 
FROM order_details; 

-- No of orders resulting in profit vs no of orders resulting in loss 
WITH cte_status AS
( SELECT *, 
CASE WHEN profit > 0 THEN 'Profit' 
	 WHEN profit < 0 THEN 'Loss' 
	 ELSE 'None' END AS Status 
FROM order_details) 

SELECT status, COUNT(1) AS counts 
FROM cte_status
GROUP BY status
ORDER BY counts DESC;

-- Find out total Cost for each order ID 
WITH cte_CP AS 
(SELECT `Order ID` AS order_id, (Amount * Quantity) AS CostPrice
 FROM order_details) 
 
SELECT order_id, SUM(CostPrice) AS Total_CostPrice
FROM cte_CP 
GROUP BY order_id ;
 
-- Total orders by different categories 
SELECT category, COUNT(1) AS Orders 
FROM order_details
GROUP BY category 
ORDER BY orders DESC ;

-- Total orders by different subcategories 
SELECT category, `Sub-Category`, COUNT(1) AS Orders 
FROM order_details
GROUP BY category, `Sub-Category` 
ORDER BY category ; 

-- Sales Targets for each category 
SELECT category, SUM(target) AS Target_Sale 
FROM target
GROUP BY category 
ORDER BY category; 
 
-- TOP Profitable category
SELECT category, SUM(profit) AS Profit
FROM order_details
GROUP BY category 
ORDER BY profit DESC;

-- TOP 3 Profitable Sub-Categories for each category 
WITH cteProducts AS (
SELECT category, `Sub-Category` AS Subcategory, SUM(profit) AS Profit ,
dense_rank() OVER(partition by category ORDER BY SUM(profit) DESC) AS rnk
FROM order_details 
GROUP BY category, Subcategory) 
 
SELECT Category, Subcategory, Profit 
FROM cteProducts 
WHERE rnk <= 3 ;
 
-- Top 5 profitable cities 
SELECT c.city, SUM(o.profit) AS profit 
FROM customers c
JOIN order_details o 
ON c.`Order ID`= o.`Order ID` 
GROUP BY c.city
ORDER BY profit DESC 
LIMIT 5;
 
-- Total Quantity sold per state 
SELECT c.state, SUM(o.Quantity) AS QuantitySold
FROM customers c 
JOIN order_details o 
ON c.`Order ID` = o.`Order ID`
GROUP BY c.state 
ORDER BY state ;

-- No of customers state-wise 
SELECT state, COUNT(`Order ID`) AS Count_Customers
FROM customers
GROUP BY state
ORDER BY state ; 

-- Total Revenue Generated by the store 
WITH cte_SP AS 
(SELECT `Order ID` AS order_id,Category, (Amount * Quantity) + profit AS SellPrice
FROM order_details) 
SELECT SUM(SellPrice) as Total_Revenue 
FROM cte_SP ;

-- Total Revenue per category 
WITH cte_SP AS 
(SELECT `Order ID` AS order_id,Category, (Amount * Quantity) + profit AS SellPrice
FROM order_details) 
SELECT category, SUM(SellPrice) AS Revenue 
FROM cte_SP 
GROUP BY category;

-- Customer Age Group segmentation by count orders 
WITH cte_AgeGroup AS ( 
SELECT * , 
CASE WHEN Age BETWEEN 15 AND 20 THEN 'Age Group 15-20' 
WHEN Age BETWEEN 21 AND 30 THEN 'Age Group 21-30'
WHEN Age BETWEEN 31 AND 40 THEN 'Age Group 31-40'
ELSE 'Age Group 41-50' END AS AgeBucket
FROM customers) 

SELECT c.AgeBucket, COUNT(o.`Order ID`) AS Count_Orders
FROM cte_AgeGroup c
JOIN order_details o
ON c.`Order ID` = o.`Order ID`
GROUP BY AgeBucket 
ORDER BY AgeBucket; 

-- Count of orders for each month 
SELECT DATE_FORMAT(`Order Date`, '%M-%Y') AS OrderDate, COUNT(1) AS orders 
FROM customers
GROUP BY OrderDate;

-- 3. RFM ANALYSIS --- 
-- Calculating R Score for each customer 
SELECT order_id, Min_Recency, 
CASE WHEN Min_Recency = 364 OR Min_Recency > 253 THEN 1 
WHEN Min_Recency >= 253 OR Min_Recency > 145 THEN 2 
WHEN Min_Recency >= 145 or Min_Recency > 65 THEN 3
ELSE 4 END AS R1_SCORE 
FROM rfm ; 

-- Calculating F score for each customer 
SELECT order_id, Sum_Quantity,
CASE WHEN Sum_Quantity = 57 OR Sum_Quantity > 35 THEN 4
WHEN Sum_Quantity >= 35 OR Sum_Quantity > 15 THEN 3
WHEN Sum_Quantity >= 15 or Sum_Quantity > 5 THEN 2
ELSE 1 END AS F1_SCORE 
FROM rfm ; 

-- Calculating M score for each customer 
SELECT order_id, Sum_Profit, M_score,
CASE WHEN Sum_Profit =1970 or Sum_Profit >500 THEN 4
WHEN Sum_Profit >= 500 or Sum_Profit > 22 THEN 3
WHEN Sum_Profit >= 22 or Sum_Profit > -22 THEN 2
ELSE 1 END AS M1_SCORE 
FROM rfm;

-- Calculating RFM Score 
WITH cte_R AS 
(SELECT order_id, Min_Recency, 
CASE WHEN Min_Recency = 364 OR Min_Recency > 253 THEN 1 
WHEN Min_Recency >= 253 OR Min_Recency > 145 THEN 2 
WHEN Min_Recency >= 145 or Min_Recency > 65 THEN 3
ELSE 4 END AS R1_SCORE 
FROM rfm ), 
cte_F AS 
(SELECT order_id, Sum_Quantity,
CASE WHEN Sum_Quantity = 57 OR Sum_Quantity > 35 THEN 4
WHEN Sum_Quantity >= 35 OR Sum_Quantity > 15 THEN 3
WHEN Sum_Quantity >= 15 or Sum_Quantity > 5 THEN 2
ELSE 1 END AS F1_SCORE 
FROM rfm ), 
cte_M AS 
( SELECT order_id, Sum_Profit, M_score,
CASE WHEN Sum_Profit =1970 or Sum_Profit >500 THEN 4
WHEN Sum_Profit >= 500 or Sum_Profit > 22 THEN 3
WHEN Sum_Profit >= 22 or Sum_Profit > -22 THEN 2
ELSE 1 END AS M1_SCORE 
FROM rfm) 

SELECT r.order_id, (R1_SCORE*100) + (F1_SCORE*10) + (M1_SCORE) AS RFM_SCORE
FROM rfm r 
JOIN cte_R c1 ON r.order_id = c1.order_id 
JOIN cte_F c2 ON r.order_id = c2.order_id 
JOIN cte_M c3 ON r.order_id = c3.order_id ;

-- Customer Segemenatation on the basis of priority 
SELECT Cust_Segment, COUNT(1) AS Customers 
FROM rfm
GROUP BY Cust_Segment ;

-- Recency Score distribution i.e.Customer with most recent order are given R_SCORE AS 4 
SELECT R_Score, COUNT(1) AS Customers 
FROM rfm
GROUP BY R_Score
ORDER BY R_Score DESC;

-- Frequency Score distribution i.e.Customer with most frequent orders are given F_SCORE AS 4
SELECT F_Score, COUNT(1) AS Customers 
FROM rfm
GROUP BY F_Score
ORDER BY F_Score DESC;

-- Monitary Score distribution i.e.Customer with Max SUM_PROFIT are given M_SCORE AS 4
SELECT M_Score, COUNT(1) AS Customers 
FROM rfm
GROUP BY M_Score
ORDER BY M_Score DESC;